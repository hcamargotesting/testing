import java.text.SimpleDateFormat

 

def dateFormat = new SimpleDateFormat("yyyyMMddHHmm")

def date = new Date()

def timestamp = dateFormat.format(date).toString()

 

 

pipeline{

       //En el servidor se debe dejar activo el agent con label NodoWindows10Advance, de manera local agent any y el otro comentado

       agent any

       //agent

       //{

             //label 'NodoWindows10Advance'

       //}

 

       stages{

             stage('Actualizar fuentes Nodo Windows') {

                   steps{

                   script{

                          try{

                                  echo 'ingresa'

                              git url: 'https://github.com/hcamargotesting/testing.git', credentialsId: 'hcamargotesting', branch: 'master'

                              echo 'finaliza'

                          }

                          catch(err)

                          {

                           echo 'Error paso inicial: ' + err

                           error('Failed')

                           }     

                    }

             }

             }

 

             stage('Test_GUI_Junit'){

                           steps{

                           script{

                                  try{

                                       //sh 'mvn -Dmaven.test.failure.ignore=true install'

                                       //sh para Linux

                                       //bat para windows

                                               bat ("mvn clean verify serenity:aggregate")

                                              

                                               echo 'Ha ejecutado sin fallo hasta test junit'      

                                  }

                                  catch(errortest){

                                      echo 'Error paso inicial: ' + errortest

                                         //error('Failed')

                                      

                                  }                                          

                                  }           

                    }

                    }

                   

             stage('BackupEvidencias'){

                    steps{

                           script{

                                  try{

                                        echo 'Backup de evidencias realizado con exito'

                          bat " rename \"${WORKSPACE}\\target\\site\\serenity\" serenity_${timestamp}"

                          echo 'Backup de evidencias realizado con exito'

                                  }

                                  catch(ex)

                                  {   

                                  echo 'Backup de evidencias realizado con fallos'

                                  error('Failed')

                                  }

                           }

                    }           

             }

            

             stage('HtmlReport'){

                    steps{

                           script{

                                  try{

                                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: "${WORKSPACE}\\target\\site\\serenity_${timestamp}", reportFiles: 'index.html', reportName: 'Ejecucion_evidencia_', reportTitles: ''])

                                        echo 'Reporte Html realizado con exito'

                                  }

                                  catch(ex)

                                  {   

                                  echo 'Reporte Html realizado con Fallos'

                                  error('Failed')

                                  }

                           }

                    }

             }

       }     

}